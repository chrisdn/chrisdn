//
//  Lonpos3DTests.swift
//  Lonpos3DTests
//
//  Created by Wei Dong on 2021-08-25.
//

import XCTest
@testable import Lonpos3D

class Lonpos3DTests: XCTestCase {

    override func setUpWithError() throws {
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }

    override func tearDownWithError() throws {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
    }

    func testMostDifficultLevel() throws {
        var game = Game()
        for _ in 0...54 {
            let p = game.mostDifficultPosition
            XCTAssert(p != nil)
            print(p!)
            game.space[p!.index()] = "8"
        }
        let p = game.mostDifficultPosition
        print(p ?? -1)
        XCTAssert(p == nil)
    }
    
    func getDistanceMp() {
        var resultArray = Array(repeating: 0, count: 55 * 55)
        for i in 0...54 {
            let p0 = PointInt3D.point(from: i)
            for j in 0...54 where i != j {
                let p1 = PointInt3D.point(from: j)
                let d = p0.floatPoint.distance(from: p1.floatPoint)
                print(i,j,d)
                resultArray[i + j * 55] = d
            }
        }
        if let data = try? JSONSerialization.data(withJSONObject: resultArray, options: []), let str = String(data: data, encoding: .utf8) {
            print(str)
        }
    }
    
    func testDistanceMap() {
        let str = "[0,1,4,9,16,1,2,5,10,17,4,5,8,13,20,9,10,13,18,25,16,17,20,25,32,1,3,7,13,3,5,9,15,7,9,13,19,13,15,19,25,4,7,12,7,10,15,12,15,20,9,13,13,17,16,1,0,1,4,9,2,1,2,5,10,5,4,5,8,13,10,9,10,13,18,17,16,17,20,25,1,1,3,7,3,3,5,9,7,7,9,13,13,13,15,19,3,4,7,6,7,10,11,12,15,7,9,11,13,13,4,1,0,1,4,5,2,1,2,5,8,5,4,5,8,13,10,9,10,13,20,17,16,17,20,3,1,1,3,5,3,3,5,9,7,7,9,15,13,13,15,4,3,4,7,6,7,12,11,12,7,7,11,11,12,9,4,1,0,1,10,5,2,1,2,13,8,5,4,5,18,13,10,9,10,25,20,17,16,17,7,3,1,1,9,5,3,3,13,9,7,7,19,15,13,13,7,4,3,10,7,6,15,12,11,9,7,13,11,13,16,9,4,1,0,17,10,5,2,1,20,13,8,5,4,25,18,13,10,9,32,25,20,17,16,13,7,3,1,15,9,5,3,19,13,9,7,25,19,15,13,12,7,4,15,10,7,20,15,12,13,9,17,13,16,1,2,5,10,17,0,1,4,9,16,1,2,5,10,17,4,5,8,13,20,9,10,13,18,25,1,3,7,13,1,3,7,13,3,5,9,15,7,9,13,19,3,6,11,4,7,12,7,10,15,7,11,9,13,13,2,1,2,5,10,1,0,1,4,9,2,1,2,5,10,5,4,5,8,13,10,9,10,13,18,1,1,3,7,1,1,3,7,3,3,5,9,7,7,9,13,2,3,6,3,4,7,6,7,10,5,7,7,9,10,5,2,1,2,5,4,1,0,1,4,5,2,1,2,5,8,5,4,5,8,13,10,9,10,13,3,1,1,3,3,1,1,3,5,3,3,5,9,7,7,9,3,2,3,4,3,4,7,6,7,5,5,7,7,9,10,5,2,1,2,9,4,1,0,1,10,5,2,1,2,13,8,5,4,5,18,13,10,9,10,7,3,1,1,7,3,1,1,9,5,3,3,13,9,7,7,6,3,2,7,4,3,10,7,6,7,5,9,7,10,17,10,5,2,1,16,9,4,1,0,17,10,5,2,1,20,13,8,5,4,25,18,13,10,9,13,7,3,1,13,7,3,1,15,9,5,3,19,13,9,7,11,6,3,12,7,4,15,10,7,11,7,13,9,13,4,5,8,13,20,1,2,5,10,17,0,1,4,9,16,1,2,5,10,17,4,5,8,13,20,3,5,9,15,1,3,7,13,1,3,7,13,3,5,9,15,4,7,12,3,6,11,4,7,12,7,11,7,11,12,5,4,5,8,13,2,1,2,5,10,1,0,1,4,9,2,1,2,5,10,5,4,5,8,13,3,3,5,9,1,1,3,7,1,1,3,7,3,3,5,9,3,4,7,2,3,6,3,4,7,5,7,5,7,9,8,5,4,5,8,5,2,1,2,5,4,1,0,1,4,5,2,1,2,5,8,5,4,5,8,5,3,3,5,3,1,1,3,3,1,1,3,5,3,3,5,4,3,4,3,2,3,4,3,4,5,5,5,5,8,13,8,5,4,5,10,5,2,1,2,9,4,1,0,1,10,5,2,1,2,13,8,5,4,5,9,5,3,3,7,3,1,1,7,3,1,1,9,5,3,3,7,4,3,6,3,2,7,4,3,7,5,7,5,9,20,13,8,5,4,17,10,5,2,1,16,9,4,1,0,17,10,5,2,1,20,13,8,5,4,15,9,5,3,13,7,3,1,13,7,3,1,15,9,5,3,12,7,4,11,6,3,12,7,4,11,7,11,7,12,9,10,13,18,25,4,5,8,13,20,1,2,5,10,17,0,1,4,9,16,1,2,5,10,17,7,9,13,19,3,5,9,15,1,3,7,13,1,3,7,13,7,10,15,4,7,12,3,6,11,9,13,7,11,13,10,9,10,13,18,5,4,5,8,13,2,1,2,5,10,1,0,1,4,9,2,1,2,5,10,7,7,9,13,3,3,5,9,1,1,3,7,1,1,3,7,6,7,10,3,4,7,2,3,6,7,9,5,7,10,13,10,9,10,13,8,5,4,5,8,5,2,1,2,5,4,1,0,1,4,5,2,1,2,5,9,7,7,9,5,3,3,5,3,1,1,3,3,1,1,3,7,6,7,4,3,4,3,2,3,7,7,5,5,9,18,13,10,9,10,13,8,5,4,5,10,5,2,1,2,9,4,1,0,1,10,5,2,1,2,13,9,7,7,9,5,3,3,7,3,1,1,7,3,1,1,10,7,6,7,4,3,6,3,2,9,7,7,5,10,25,18,13,10,9,20,13,8,5,4,17,10,5,2,1,16,9,4,1,0,17,10,5,2,1,19,13,9,7,15,9,5,3,13,7,3,1,13,7,3,1,15,10,7,12,7,4,11,6,3,13,9,11,7,13,16,17,20,25,32,9,10,13,18,25,4,5,8,13,20,1,2,5,10,17,0,1,4,9,16,13,15,19,25,7,9,13,19,3,5,9,15,1,3,7,13,12,15,20,7,10,15,4,7,12,13,17,9,13,16,17,16,17,20,25,10,9,10,13,18,5,4,5,8,13,2,1,2,5,10,1,0,1,4,9,13,13,15,19,7,7,9,13,3,3,5,9,1,1,3,7,11,12,15,6,7,10,3,4,7,11,13,7,9,13,20,17,16,17,20,13,10,9,10,13,8,5,4,5,8,5,2,1,2,5,4,1,0,1,4,15,13,13,15,9,7,7,9,5,3,3,5,3,1,1,3,12,11,12,7,6,7,4,3,4,11,11,7,7,12,25,20,17,16,17,18,13,10,9,10,13,8,5,4,5,10,5,2,1,2,9,4,1,0,1,19,15,13,13,13,9,7,7,9,5,3,3,7,3,1,1,15,12,11,10,7,6,7,4,3,13,11,9,7,13,32,25,20,17,16,25,18,13,10,9,20,13,8,5,4,17,10,5,2,1,16,9,4,1,0,25,19,15,13,19,13,9,7,15,9,5,3,13,7,3,1,20,15,12,15,10,7,12,7,4,17,13,13,9,16,1,1,3,7,13,1,1,3,7,13,3,3,5,9,15,7,7,9,13,19,13,13,15,19,25,0,1,4,9,1,2,5,10,4,5,8,13,9,10,13,18,1,3,7,3,5,9,7,9,13,4,7,7,10,9,3,1,1,3,7,3,1,1,3,7,5,3,3,5,9,9,7,7,9,13,15,13,13,15,19,1,0,1,4,2,1,2,5,5,4,5,8,10,9,10,13,1,1,3,3,3,5,7,7,9,3,4,6,7,7,7,3,1,1,3,7,3,1,1,3,9,5,3,3,5,13,9,7,7,9,19,15,13,13,15,4,1,0,1,5,2,1,2,8,5,4,5,13,10,9,10,3,1,1,5,3,3,9,7,7,4,3,7,6,7,13,7,3,1,1,13,7,3,1,1,15,9,5,3,3,19,13,9,7,7,25,19,15,13,13,9,4,1,0,10,5,2,1,13,8,5,4,18,13,10,9,7,3,1,9,5,3,13,9,7,7,4,10,7,9,3,3,5,9,15,1,1,3,7,13,1,1,3,7,13,3,3,5,9,15,7,7,9,13,19,1,2,5,10,0,1,4,9,1,2,5,10,4,5,8,13,1,3,7,1,3,7,3,5,9,3,6,4,7,7,5,3,3,5,9,3,1,1,3,7,3,1,1,3,7,5,3,3,5,9,9,7,7,9,13,2,1,2,5,1,0,1,4,2,1,2,5,5,4,5,8,1,1,3,1,1,3,3,3,5,2,3,3,4,5,9,5,3,3,5,7,3,1,1,3,7,3,1,1,3,9,5,3,3,5,13,9,7,7,9,5,2,1,2,4,1,0,1,5,2,1,2,8,5,4,5,3,1,1,3,1,1,5,3,3,3,2,4,3,5,15,9,5,3,3,13,7,3,1,1,13,7,3,1,1,15,9,5,3,3,19,13,9,7,7,10,5,2,1,9,4,1,0,10,5,2,1,13,8,5,4,7,3,1,7,3,1,9,5,3,6,3,7,4,7,7,7,9,13,19,3,3,5,9,15,1,1,3,7,13,1,1,3,7,13,3,3,5,9,15,4,5,8,13,1,2,5,10,0,1,4,9,1,2,5,10,3,5,9,1,3,7,1,3,7,4,7,3,6,7,9,7,7,9,13,5,3,3,5,9,3,1,1,3,7,3,1,1,3,7,5,3,3,5,9,5,4,5,8,2,1,2,5,1,0,1,4,2,1,2,5,3,3,5,1,1,3,1,1,3,3,4,2,3,5,13,9,7,7,9,9,5,3,3,5,7,3,1,1,3,7,3,1,1,3,9,5,3,3,5,8,5,4,5,5,2,1,2,4,1,0,1,5,2,1,2,5,3,3,3,1,1,3,1,1,4,3,3,2,5,19,13,9,7,7,15,9,5,3,3,13,7,3,1,1,13,7,3,1,1,15,9,5,3,3,13,8,5,4,10,5,2,1,9,4,1,0,10,5,2,1,9,5,3,7,3,1,7,3,1,7,4,6,3,7,13,13,15,19,25,7,7,9,13,19,3,3,5,9,15,1,1,3,7,13,1,1,3,7,13,9,10,13,18,4,5,8,13,1,2,5,10,0,1,4,9,7,9,13,3,5,9,1,3,7,7,10,4,7,9,15,13,13,15,19,9,7,7,9,13,5,3,3,5,9,3,1,1,3,7,3,1,1,3,7,10,9,10,13,5,4,5,8,2,1,2,5,1,0,1,4,7,7,9,3,3,5,1,1,3,6,7,3,4,7,19,15,13,13,15,13,9,7,7,9,9,5,3,3,5,7,3,1,1,3,7,3,1,1,3,13,10,9,10,8,5,4,5,5,2,1,2,4,1,0,1,9,7,7,5,3,3,3,1,1,7,6,4,3,7,25,19,15,13,13,19,13,9,7,7,15,9,5,3,3,13,7,3,1,1,13,7,3,1,1,18,13,10,9,13,8,5,4,10,5,2,1,9,4,1,0,13,9,7,9,5,3,7,3,1,10,7,7,4,9,4,3,4,7,12,3,2,3,6,11,4,3,4,7,12,7,6,7,10,15,12,11,12,15,20,1,1,3,7,1,1,3,7,3,3,5,9,7,7,9,13,0,1,4,1,2,5,4,5,8,1,3,3,5,4,7,4,3,4,7,6,3,2,3,6,7,4,3,4,7,10,7,6,7,10,15,12,11,12,15,3,1,1,3,3,1,1,3,5,3,3,5,9,7,7,9,1,0,1,2,1,2,5,4,5,1,1,3,3,3,12,7,4,3,4,11,6,3,2,3,12,7,4,3,4,15,10,7,6,7,20,15,12,11,12,7,3,1,1,7,3,1,1,9,5,3,3,13,9,7,7,4,1,0,5,2,1,8,5,4,3,1,5,3,4,7,6,7,10,15,4,3,4,7,12,3,2,3,6,11,4,3,4,7,12,7,6,7,10,15,3,3,5,9,1,1,3,7,1,1,3,7,3,3,5,9,1,2,5,0,1,4,1,2,5,1,3,1,3,3,10,7,6,7,10,7,4,3,4,7,6,3,2,3,6,7,4,3,4,7,10,7,6,7,10,5,3,3,5,3,1,1,3,3,1,1,3,5,3,3,5,2,1,2,1,0,1,2,1,2,1,1,1,1,2,15,10,7,6,7,12,7,4,3,4,11,6,3,2,3,12,7,4,3,4,15,10,7,6,7,9,5,3,3,7,3,1,1,7,3,1,1,9,5,3,3,5,2,1,4,1,0,5,2,1,3,1,3,1,3,12,11,12,15,20,7,6,7,10,15,4,3,4,7,12,3,2,3,6,11,4,3,4,7,12,7,7,9,13,3,3,5,9,1,1,3,7,1,1,3,7,4,5,8,1,2,5,0,1,4,3,5,1,3,4,15,12,11,12,15,10,7,6,7,10,7,4,3,4,7,6,3,2,3,6,7,4,3,4,7,9,7,7,9,5,3,3,5,3,1,1,3,3,1,1,3,5,4,5,2,1,2,1,0,1,3,3,1,1,3,20,15,12,11,12,15,10,7,6,7,12,7,4,3,4,11,6,3,2,3,12,7,4,3,4,13,9,7,7,9,5,3,3,7,3,1,1,7,3,1,1,8,5,4,5,2,1,4,1,0,5,3,3,1,4,9,7,7,9,13,7,5,5,7,11,7,5,5,7,11,9,7,7,9,13,13,11,11,13,17,4,3,4,7,3,2,3,6,4,3,4,7,7,6,7,10,1,1,3,1,1,3,3,3,5,0,1,1,2,1,13,9,7,7,9,11,7,5,5,7,11,7,5,5,7,13,9,7,7,9,17,13,11,11,13,7,4,3,4,6,3,2,3,7,4,3,4,10,7,6,7,3,1,1,3,1,1,5,3,3,1,0,2,1,1,13,11,11,13,17,9,7,7,9,13,7,5,5,7,11,7,5,5,7,11,9,7,7,9,13,7,6,7,10,4,3,4,7,3,2,3,6,4,3,4,7,3,3,5,1,1,3,1,1,3,1,2,0,1,1,17,13,11,11,13,13,9,7,7,9,11,7,5,5,7,11,7,5,5,7,13,9,7,7,9,10,7,6,7,7,4,3,4,6,3,2,3,7,4,3,4,5,3,3,3,1,1,3,1,1,2,1,1,0,1,16,13,12,13,16,13,10,9,10,13,12,9,8,9,12,13,10,9,10,13,16,13,12,13,16,9,7,7,9,7,5,5,7,7,5,5,7,9,7,7,9,4,3,4,3,2,3,4,3,4,1,1,1,1,0]"
        let data = str.data(using: .utf8)!
        let list = try? JSONSerialization.jsonObject(with: data, options: []) as? [Int]
        for i in 0...54 {
            let p0 = PointInt3D.point(from: i)
            for j in 0...54 where i != j {
                let p1 = PointInt3D.point(from: j)
                let d = p0.floatPoint.distance(from: p1.floatPoint)
                print(i,j,d)
                assert(d == list![i * 55 + j])
            }
        }
    }

    func testPerformanceExample() throws {
        // This is an example of a performance test case.
        measure {
            // Put the code you want to measure the time of here.
        }
    }

}
